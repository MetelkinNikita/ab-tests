# ЧЕК-ЛИСТ А/В ТЕСТИРОВАНИЯ

1.  **Бизнес проблема.** Необходимо сформулировать решаемую задачу

2.  **Гипотеза**
    Предложить способ решения бизнес-проблемы и метод измерения результата:
    * что мы изменим;
    * на что это повлияет;
    * как будем измерять (целевая, контрольные и вспомогательные метрики).

3.  **Уровни ошибок и ожидаемый эффект**
    * зафиксировать допустимый уровень ошибки первого рода (alpha);
    * зафиксировать допустимый уровень ошибки второго рода (beta);
    * зафиксировать минимальный детектируемый эффект (MDE).

4.  **Какая метрика?** (среднее, квантили, медиана, метрика отношения и т.д.)

5.  **Для метрик отношения выбрать способ преобразования**
    * дельта-метод;
    * линеаризация.

6.  **Выбор применяемых методов повышения чувствительности**
    Мы можем выбрать различные способы преобразования исходной метрики, которые позволяют снизить дисперсию в данных:
    * методы обработки выбросов;
        `[Outlier_IQR(df: pd.DataFrame); process_outliers(df: pd.DataFrame, bounds: tuple[float, float], outlier_process_type: str)]`
    * CUPED (при наличии исторических данных и ковариаты);
        функция расчета CUPED метрики `[calculate_cuped_metric(df_metric: pd.DataFrame, df_cov: pd.DataFrame)]`
    * cтратификация (при наличии соответствующей сплит-системы и метрики, для которой хорошо работает ЦПТ);
        функция расчета весов `[stratified_weights(df: pd.DataFrame)]`

    Можно и повышать чувствительность данных и при решении проведить A/B тестирование с помощью бутстрепа.

7.  **Оценивам распределение данных с помощью графиков или статистических тестов**
    В случае использования стратификации необходимо проверить на нормальность данные из каждой страты по отдельности. В программе реализованн визуальный метод оценки с помощью графиков:
    `[box_plot(df: pd.Series)];`
    `histogram(df: pd.Series);`
    `scatter_plot(df: pd.Series);`
    `QQ-plot(df: pd.Series)]`

8.  **Зафиксировать критерий принятие финального решения**
    * t-test; (1. для метрики среднего и при условии что данные не сильно скошены и выборка достаточного размера. 2. для метрики отношения с дельта методом)
    * 2.  Непараметрический тест Манна-Уитни (более робастый ранговый метод к количеству данных и их распределению)
    * 2.  Бутстреп (в случае, если метрика не среднее или распределение данных сильно скошено);
    * 3.  Влияние на целевые, контрольные и вспомогательные метрики;

9.  **На исторических данных оценить дисперсию**
    * Дисперсия для стратифицированных данных `[stratified_var(df: pd.DataFrame)]`
    * Дисперсия для нормального распределения `[var_norm(df: pd.DataFrame)]`
    * для метрик отношения с использованием дельта-метода дисперсия оценивается с помощью функции: `[var_delta_method(df: pd.DataFrame)]`
    * для метрики отношения с использованием линеаризации наши данные преобразуются в данные для каждого пользователя затем можем применять для этих данных методы повышения чувствительности (в общем работать так же, как и с обычными данными). Функция для получения линеаризованной метрики: `[calculate_linearized_metrics(df: pd.DataFrame)]`

10. **Оценка продолжительности эксперимента**
    Зная уровни ошибок, MDE и дисперсию мы можем посчитать:
    * sample size при условии равных дисперсий `[group_size_equal_var(var: float, alpha: float, beta: float, mde: float)]`
    * sample size при условии разных дисперсий `[group_size(var_a: float, var_b: float, alpha: float, beta: float, mde: float)]`
    * В случае бутстрепа оценить размер групп можно с помощью многократной симуляции бутстрепа для различным размеров групп пока не получим нужные уровни ошибок. Функция: `def group_size_bootstrap(df: pd.DataFrame, effect_add_type='all_const', effect=2, iter=3000)`
        Исходя из размера групп можно оценить продолжительность эксперимента.

11. **Проверка дизайна на исторических данных**
    Проводим серию численных экспериментов, чтобы убедиться, что выбранный дизайн на самом деле дает установленные нами уровни ошибок:
    * A/A эксперименты на исторических данных;
    * A/B эксперименты на исторических данных (с добавлением эффекта, равного по величине MDE).

    `estimate_errors(df: pd.DataFrame, effect: float, n: int, effect_add_type: str ='all_const', alpha: float=0.05, iter: int = 5000)` Для данных (при необходимости преобразованных, с повышением чувствительности) проводим А/А и А/В тесты для групп найденного размера.

    Функция сделана без учета стратификации. В случае, если необходимо проверить дизайн со стратификацией, нужно применить стратифицированное семплирование и постстратификацию с помощью функции `get_ttest_strat_pvalue`.

    В случае delta-method для метрики отношения расчитывем разность метрик отношения для обеих выборок и считаем диспресию с помощью функции `var_delta_method` и рассчитывем p_value. В данной функции это пока не реализовано.

    Если проводится тест Манна-Уитни, то проверка p_value рассчитывается соотвественно с помощью функции `[mannwhitney_ab_test(a: np.ndarray, b: np.ndarray, alternative: str = ‘two-sided')]`
    * Функция для оценки распределения полученных значений p_value: `plot_pvalue_hist_ecdf(pvalues: np.array)`

12. **Размещение эксперимента**
    Подбираем тестовую и контрольную группы пользователей. Раскатка эксперимента может происходить постепенно. Это позволяет снизить риск возникновения критических сбоев у большого числа пользователей.
    * пост-стратификация (при условии, что страты существуют).В случай отсутствия возможности провести стратификацию и, если при проведелении эксперимента будете использовать постстратификацию, то оценивать размер групп нужно по историческим нестратифицированным данным, тогда можно брать консервативную оценку размера групп.
        Функция расчета p_value с использованием постстратификации `[get_ttest_strat_pvalue(metrics_strat_a_group: pd.DataFrame, metrics_strat_b_group: pd.DataFrame)]`
    * Бутстреп: `[bootstrap(df_control: np.array, df_test: np.array, quantile: float, iter=2000)]`. Функции для расчета интервалов:
        * `bootstrap_norm_ci(point_estimate: float, boots_metrics: np.array, alpha: float=0.05)`
        * `bootstrap_percentile_ci(boots_metrics: np.array, alpha:float=0.05)`
        * `bootstrap_central_ci(point_estimate: float, boots_metrics: np.array, alpha: float=0.05)`
    * T-test: `stats.ttest_ind(a,b)`. Пользуемся t-test при условии нормального или почти нормального распределения данных. t-статистики в дельма методе и постстратификации рассчитываем руками

13. **Сбор и обработка результатов**

14. **Дождаться окончания эксперимента.** Не принимать положительное решение до окончания эксперимента (проблема подглядывания).

15. **Принятие решения об успехе или неудаче эксперимента.**

16. **Сохранить результаты, записать инсайты/выводы/идеи.**
